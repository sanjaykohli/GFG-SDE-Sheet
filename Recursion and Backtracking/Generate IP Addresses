//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


// } Driver Code Ends
/*You are required to complete this method*/

class Solution{
  public:
    vector<string> genIp(string &s) {
        // Your code here
        
        vector<string> result;
        int n = s.size();
        if (n < 4 || n > 12) return result; // Early return if impossible to form an IP
        
        // Helper function to check if a segment is a valid IP segment
        auto isValid = [](const string& seg) {
            if (seg.size() > 1 && seg[0] == '0') return false; // No leading zero allowed unless single '0'
            int num = stoi(seg);
            return num >= 0 && num <= 255;
        };
        
        // Trying all possible splits
        for (int i = 1; i <= 3; i++) {
            for (int j = i + 1; j <= i + 3; j++) {
                for (int k = j + 1; k <= j + 3; k++) {
                    if (i < n && j < n && k < n) {
                        string part1 = s.substr(0, i);
                        string part2 = s.substr(i, j - i);
                        string part3 = s.substr(j, k - j);
                        string part4 = s.substr(k);
                        
                        if (isValid(part1) && isValid(part2) && isValid(part3) && isValid(part4)) {
                            result.push_back(part1 + '.' + part2 + '.' + part3 + '.' + part4);
                        }
                    }
                }
            }
        }
        
        return result;
    }

};

//{ Driver Code Starts.

int main() {
    int T;
    cin >> T;
    while (T--) {
        string s;
        cin >> s;

        /*generating naively*/
        Solution obj;
        vector<string> str = obj.genIp(s);
        sort(str.begin(), str.end());
        if(str.size()==0)
            cout << -1 << "\n";
        else{
            for (auto &u : str) {
                cout << u << "\n";
            }
        }
    }
}
// } Driver Code Ends
